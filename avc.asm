; temp file used to test AVC interface

		org $0

fontbit:	bss 1
fontchr:	bss 1

		org $10000

dotoff=$0
doton=$ff

begin:		sei		; mask interrupts

		lda #>1		; $01 -> DBR
		pha
		plb

		ldx #0		
		lda #>0		; map is 0-255
1:		sta <$84000,x
		sta <$8f000,x
		inx
		inc
2:	 	cpx #2048
		bne >1b

		ldx #0
		lda #>$1c	; green
1:		sta <$8f400,x
		inx
		cpx #16
		bne >1b

		lda #>$3	; blue
1:		sta <$8f400,x
		inx
		cpx #32
		bne >1b

		ldx #0
		lda #>$e0	; dark red
1:		sta <$8f7f0,x
		inx
		cpx #16
		bne >1b

		ldx #0		; tile index
		ldy #0		; font index

1:		lda #>8		; 8 bits/byte
		sta >fontbit
		lda font,y	
		sta >fontchr

2:		rol >fontchr	; look at next bit
		bcs >3f		; set?
		lda #>dotoff	; no,use off color
		bra >4f
3:		lda #>doton	; yes,use on color
4:		sta <$80000,x	; store it in tile RAM
		inx		; bump tile index

		dec >fontbit	; one less bit
		bne >2b		; branch if not done

		iny		; bump font index
		cpy #128*8	; done 128 chars?
		bne >1b		; nope,next char


		lda #>$3e
		sta <$8c010
		sta <$8c011
		sta <$8c012
		sta <$8c013
		sta <$8c014
		sta <$8c015
		sta <$8c016
		sta <$8c017

		lda #>$1c
		sta <$8c030
		sta <$8c031
		sta <$8c032
		sta <$8c033
		sta <$8c034
		sta <$8c035
		sta <$8c036
		sta <$8c037

		lda #>$ff
		sta <$8c7f0
		sta <$8c7f1
		sta <$8c7f2
		sta <$8c7f3
		sta <$8c7f4
		sta <$8c7f5
		sta <$8c7f6
		sta <$8c7f7

		lda #>0	
		sta <$8c000
		sta <$8c001
		sta <$84800
		sta <$84801
1:		ldx #$ffff
2:		dex
		bne >2b
		inc
;		sta <$84800
;		sta <$84801
;		sta <$88000
		sta <$8c000
		sta <$8c001
		eor #>$ff
		sta <$8c020
		sta <$8c021
		eor #>$ff
		xba
		sta <$8c7e0
		inc
		inc
		inc
		xba
		bra >1b

font:		byte $00,$00,$00,$00,$00,$00,$00,$00 ; 
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ; 
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;
 		byte $00,$00,$00,$00,$00,$00,$00,$00 ;

                byte $00,$00,$00,$00,$00,$00,$00,$00 ; (space)
                byte $20,$20,$20,$20,$20,$00,$20,$00 ; !
                byte $50,$50,$50,$00,$00,$00,$00,$00 ; "
                byte $50,$50,$F8,$50,$F8,$50,$50,$00 ; #
                byte $20,$78,$A0,$70,$28,$F0,$20,$00 ; $
                byte $C0,$C8,$10,$20,$40,$98,$18,$00 ; %
                byte $60,$90,$A0,$40,$A8,$90,$68,$00 ; &
                byte $60,$20,$40,$00,$00,$00,$00,$00 ; '
                byte $10,$20,$40,$40,$40,$20,$10,$00 ; (
                byte $40,$20,$10,$10,$10,$20,$40,$00 ; )
                byte $00,$50,$20,$F8,$20,$50,$00,$00 ; *
                byte $00,$20,$20,$F8,$20,$20,$00,$00 ; +
                byte $00,$00,$00,$00,$60,$20,$40,$00 ; ,
                byte $00,$00,$00,$F8,$00,$00,$00,$00 ; -
                byte $00,$00,$00,$00,$00,$60,$60,$00 ; .
                byte $00,$08,$10,$20,$40,$80,$00,$00 ; /
                byte $70,$88,$98,$A8,$C8,$88,$70,$00 ; 0
                byte $20,$60,$20,$20,$20,$20,$70,$00 ; 1
                byte $70,$88,$08,$10,$20,$40,$F8,$00 ; 2
                byte $F8,$10,$20,$10,$08,$88,$70,$00 ; 3
                byte $10,$30,$50,$90,$F8,$10,$10,$00 ; 4
                byte $F8,$80,$F0,$08,$08,$88,$70,$00 ; 5
                byte $30,$40,$80,$F0,$88,$88,$70,$00 ; 6
                byte $F8,$08,$10,$20,$40,$40,$40,$00 ; 7
                byte $70,$88,$88,$70,$88,$88,$70,$00 ; 8
                byte $70,$88,$88,$78,$08,$10,$60,$00 ; 9
                byte $00,$60,$60,$00,$60,$60,$00,$00 ; :
                byte $00,$60,$60,$00,$60,$20,$40,$00 ; ;
                byte $08,$10,$20,$40,$20,$10,$08,$00 ; <
                byte $00,$00,$F8,$00,$F8,$00,$00,$00 ; =
                byte $80,$40,$20,$10,$20,$40,$80,$00 ; >
                byte $70,$88,$08,$10,$20,$00,$20,$00 ; ?
                byte $70,$88,$08,$68,$A8,$A8,$70,$00 ; @
                byte $70,$88,$88,$88,$F8,$88,$88,$00 ; A
                byte $F0,$88,$88,$F0,$88,$88,$F0,$00 ; B
                byte $70,$88,$80,$80,$80,$88,$70,$00 ; C
                byte $E0,$90,$88,$88,$88,$90,$E0,$00 ; D
                byte $F8,$80,$80,$F0,$80,$80,$F8,$00 ; E
                byte $F8,$80,$80,$E0,$80,$80,$80,$00 ; F
                byte $70,$88,$80,$80,$98,$88,$70,$00 ; G
                byte $88,$88,$88,$F8,$88,$88,$88,$00 ; H
                byte $70,$20,$20,$20,$20,$20,$70,$00 ; I
                byte $38,$10,$10,$10,$10,$90,$60,$00 ; J
                byte $88,$90,$A0,$C0,$A0,$90,$88,$00 ; K
                byte $80,$80,$80,$80,$80,$80,$F8,$00 ; L
                byte $88,$D8,$A8,$88,$88,$88,$88,$00 ; M
                byte $88,$88,$C8,$A8,$98,$88,$88,$00 ; N
                byte $70,$88,$88,$88,$88,$88,$70,$00 ; O
                byte $F0,$88,$88,$F0,$80,$80,$80,$00 ; P
                byte $70,$88,$88,$88,$A8,$90,$68,$00 ; Q
                byte $F0,$88,$88,$F0,$A0,$90,$88,$00 ; R
                byte $78,$80,$80,$70,$08,$08,$F0,$00 ; S
                byte $F8,$20,$20,$20,$20,$20,$20,$00 ; T
                byte $88,$88,$88,$88,$88,$88,$70,$00 ; U
                byte $88,$88,$88,$88,$88,$50,$20,$00 ; V
                byte $88,$88,$88,$A8,$A8,$D8,$88,$00 ; W
                byte $88,$88,$50,$20,$50,$88,$88,$00 ; X
                byte $88,$88,$50,$20,$20,$20,$20,$00 ; Y
                byte $F8,$08,$10,$20,$40,$80,$F8,$00 ; Z
                byte $38,$20,$20,$20,$20,$20,$38,$00 ; [
                byte $00,$80,$40,$20,$10,$08,$00,$00 ; \
                byte $E0,$20,$20,$20,$20,$20,$E0,$00 ; ]
                byte $20,$50,$88,$00,$00,$00,$00,$00 ; ^
                byte $00,$00,$00,$00,$00,$00,$F8,$00 ; _
                byte $40,$20,$10,$00,$00,$00,$00,$00 ; `
                byte $00,$00,$70,$08,$78,$88,$78,$00 ; a
                byte $80,$80,$B0,$C8,$88,$88,$F0,$00 ; b
                byte $00,$00,$70,$80,$80,$88,$70,$00 ; c
                byte $08,$08,$68,$98,$88,$88,$78,$00 ; d
                byte $00,$00,$70,$88,$F8,$80,$70,$00 ; e
                byte $30,$48,$40,$E0,$40,$40,$40,$00 ; f
                byte $00,$00,$78,$88,$78,$08,$30,$00 ; g
                byte $80,$80,$B0,$C8,$88,$88,$88,$00 ; h
                byte $20,$00,$60,$20,$20,$20,$70,$00 ; i
                byte $10,$00,$30,$10,$10,$90,$60,$00 ; j
                byte $40,$40,$48,$50,$60,$50,$48,$00 ; k
                byte $60,$20,$20,$20,$20,$20,$70,$00 ; l
                byte $00,$00,$D0,$A8,$A8,$88,$88,$00 ; m
                byte $00,$00,$B0,$C8,$88,$88,$88,$00 ; n
                byte $00,$00,$70,$88,$88,$88,$70,$00 ; o
                byte $00,$00,$F0,$88,$F0,$80,$80,$00 ; p
                byte $00,$00,$68,$98,$78,$08,$08,$00 ; q
                byte $00,$00,$B0,$C8,$80,$80,$80,$00 ; r
                byte $00,$00,$70,$80,$70,$08,$F0,$00 ; s
                byte $40,$40,$E0,$40,$40,$48,$30,$00 ; t
                byte $00,$00,$88,$88,$88,$98,$68,$00 ; u
                byte $00,$00,$88,$88,$88,$50,$20,$00 ; v
                byte $00,$00,$88,$88,$A8,$A8,$50,$00 ; w
                byte $00,$00,$88,$50,$20,$50,$88,$00 ; x
                byte $00,$00,$88,$88,$78,$08,$70,$00 ; y
                byte $00,$00,$F8,$10,$20,$40,$F8,$00 ; z
                byte $10,$20,$20,$40,$20,$20,$10,$00 ; {
                byte $20,$20,$20,$20,$20,$20,$20,$00 ; |
                byte $40,$20,$20,$10,$20,$20,$40,$00 ; }
                byte $00,$20,$10,$F8,$10,$20,$00,$00 ; ->
                byte $00,$20,$40,$F8,$40,$20,$00,$00 ; <-

